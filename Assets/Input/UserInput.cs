//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8c018eef-e142-4532-a156-c69355394b94"",
            ""actions"": [
                {
                    ""name"": ""LeftFlip"",
                    ""type"": ""Button"",
                    ""id"": ""d3b7f1d6-fad0-49c0-b035-dcc8aa4d7506"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightFlip"",
                    ""type"": ""Button"",
                    ""id"": ""64e60d71-e9f4-43f5-b2c4-f24d25694fbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LauncherHold"",
                    ""type"": ""Button"",
                    ""id"": ""d610fc82-cdf2-4d6e-9584-e8c8282f3508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8fd735a-64eb-4d39-8068-deb119d8c633"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3836d3c0-0429-4a52-83d1-a8fad6b54a1a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c31876-3892-4b86-886d-d3d8f0d2ed48"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20765abf-b937-469e-a7e4-67bfc0e9a44f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e8b4197-451a-4499-9bab-b7ec0bb0ac95"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LauncherHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14b3c927-1732-487d-86f1-68fa428d373e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LauncherHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_LeftFlip = m_Gameplay.FindAction("LeftFlip", throwIfNotFound: true);
        m_Gameplay_RightFlip = m_Gameplay.FindAction("RightFlip", throwIfNotFound: true);
        m_Gameplay_LauncherHold = m_Gameplay.FindAction("LauncherHold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_LeftFlip;
    private readonly InputAction m_Gameplay_RightFlip;
    private readonly InputAction m_Gameplay_LauncherHold;
    public struct GameplayActions
    {
        private @UserInput m_Wrapper;
        public GameplayActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftFlip => m_Wrapper.m_Gameplay_LeftFlip;
        public InputAction @RightFlip => m_Wrapper.m_Gameplay_RightFlip;
        public InputAction @LauncherHold => m_Wrapper.m_Gameplay_LauncherHold;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @LeftFlip.started += instance.OnLeftFlip;
            @LeftFlip.performed += instance.OnLeftFlip;
            @LeftFlip.canceled += instance.OnLeftFlip;
            @RightFlip.started += instance.OnRightFlip;
            @RightFlip.performed += instance.OnRightFlip;
            @RightFlip.canceled += instance.OnRightFlip;
            @LauncherHold.started += instance.OnLauncherHold;
            @LauncherHold.performed += instance.OnLauncherHold;
            @LauncherHold.canceled += instance.OnLauncherHold;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @LeftFlip.started -= instance.OnLeftFlip;
            @LeftFlip.performed -= instance.OnLeftFlip;
            @LeftFlip.canceled -= instance.OnLeftFlip;
            @RightFlip.started -= instance.OnRightFlip;
            @RightFlip.performed -= instance.OnRightFlip;
            @RightFlip.canceled -= instance.OnRightFlip;
            @LauncherHold.started -= instance.OnLauncherHold;
            @LauncherHold.performed -= instance.OnLauncherHold;
            @LauncherHold.canceled -= instance.OnLauncherHold;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnLeftFlip(InputAction.CallbackContext context);
        void OnRightFlip(InputAction.CallbackContext context);
        void OnLauncherHold(InputAction.CallbackContext context);
    }
}
